# Copyright (C) 2024, twiinIT
# SPDX-License-Identifier: BSD-3-Clause

from typing import Dict

from cosapp.systems import System
from OCC.Core.TopoDS import TopoDS_Shape

from cosapp.systems import System

from pyturbo.systems.propeller import Propeller
from pyturbo.systems.torque_generator import TorqueGenerator
from pyturbo.systems.nozzle import Nozzle
from pyturbo.systems.power_gear_box import PowerGearBox

from pyturbo.systems.turboprop import TurbopropAero, TurbopropGeom

from pyturbo.utils import JupyterViewable

class Turboprop(System, JupyterViewable):
    """Turboprop assembly system.

    Sub-systems
    -----------

    Inputs
    ------
    fl_in: FluidPort
        inlet flow
    pamb[Pa]: float
        ambiant static pressure
    fan_diameter[m]: float
        diameter of the fan
    fuel_W[kg/s]: float
        fuel mass flow

    Outputs
    -------
    pamb[Pa]: float
        ambiant pressure
    weight[kg]: float
        engine weight (without nacelle)
    thrust[N]: float
        total thrust generated by engine and nacelle
    bpr[-]: float
        by pass ratio = secondary flow / primary flow
    opr[-]: float
        overall pressure ration
    sfc[-]: float
        specific fuel consumption
    N1[rpm]: float
        Low pressure spool speed rotation
    N2[rpm]: float
        High pressure spool speed rotation
    pr_split[-]: float
        pressure split between fan module and core
    pr_nozzle[-] : float
        total pressure ratio between secondary nozzle and primary nozzle

    """

    def setup(self):
        # physics
        self.add_child(TurbopropGeom("geom"), pulling=["propeller_diameter"])

        # component
        self.add_child(TorqueGenerator("core"), pulling=["fuel_W", "fl_in"])
        self.add_child(Nozzle("primary_nozzle"), pulling=["pamb"])
        self.add_child(PowerGearBox("pgb"))

        self.add_child(Propeller("propeller"))

        self.add_child(TurbopropAero("aero"), pulling=["fuel_W"])

        # shaft connectors
        self.connect(self.core.sh_out, self.pgb.sh_in)
        self.connect(self.pgb.sh_out, self.propeller.sh_in)

        # fluid connectors
        self.connect(self.core.fl_out, self.primary_nozzle.fl_in)

        # aero connectors
        self.connect(self.propeller.outwards, self.aero.inwards, {"thrust": "propeller_thrust"})
        self.connect(self.primary_nozzle.outwards, self.aero.inwards, {"thrust": "primary_nozzle_thrust"})

        # geometry connectors
        self.connect(self.geom.propeller_kp, self.propeller.kp)
        self.connect(self.geom.core_kp, self.core.kp)
        self.connect(self.geom.primary_nozzle_kp, self.primary_nozzle.kp)

    def _to_occt(self) -> Dict[str, TopoDS_Shape]:
        return dict(
            torque_generator=self.core._to_occt(),
            # primary_nozzle=self.primary_nozzle.geom._to_occt(),
            propeller=self.propeller._to_occt(),
        )
