# Copyright (C) 2024, twiinIT
# SPDX-License-Identifier: BSD-3-Clause

from cosapp.systems import System

from pyturbo.systems.inlet import Inlet
from pyturbo.systems.compressor import Compressor
from pyturbo.systems.torque_generator import TorqueGenerator
from pyturbo.systems.nozzle import Nozzle
from pyturbo.systems.power_gear_box import PowerGearBox

from pyturbo.systems.turboprop import TurbopropAero

class Turboprop(System):
    """Turboprop assembly system.

    Sub-systems
    -----------

    Inputs
    ------
    fl_in: FluidPort
        inlet flow
    pamb[Pa]: float
        ambiant static pressure
    fan_diameter[m]: float
        diameter of the fan
    fuel_W[kg/s]: float
        fuel mass flow

    Outputs
    -------
    pamb[Pa]: float
        ambiant pressure
    weight[kg]: float
        engine weight (without nacelle)
    thrust[N]: float
        total thrust generated by engine and nacelle
    bpr[-]: float
        by pass ratio = secondary flow / primary flow
    opr[-]: float
        overall pressure ration
    sfc[-]: float
        specific fuel consumption
    N1[rpm]: float
        Low pressure spool speed rotation
    N2[rpm]: float
        High pressure spool speed rotation
    pr_split[-]: float
        pressure split between fan module and core
    pr_nozzle[-] : float
        total pressure ratio between secondary nozzle and primary nozzle

    """

    def setup(self):
        # component
        self.add_child(Inlet("inlet"), pulling=["fl_in", "pamb"])
        self.add_child(TorqueGenerator("core"), pulling=["fuel_W"])
        self.add_child(Nozzle("primary_nozzle"), pulling=["pamb"])
        self.add_child(PowerGearBox("pgb"))

        self.add_child(Compressor("propeller"))

        self.add_child(TurbopropAero("aero"), pulling=["fuel_W"])

        # shaft connectors
        self.connect(self.core.sh_out, self.pgb.sh_in)
        self.connect(self.pgb.sh_out, self.propeller.sh_in)

        # fluid connectors
        self.connect(self.inlet.fl_out, self.core.fl_in)
        self.connect(self.core.fl_out, self.primary_nozzle.fl_in)

        # aero connectors
        self.connect(self.inlet.outwards, self.aero.inwards, {"drag": "inlet_drag"})
        self.connect(self.primary_nozzle.outwards, self.aero.inwards, {"thrust": "primary_nozzle_thrust"})